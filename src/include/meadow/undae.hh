#pragma once

/*
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
--------------------------------------------------------------------------------------------------------------------------------
================================================================================================================================

███    █▄  ███▄▄▄▄   ████████▄     ▄████████    ▄████████ 
███    ███ ███▀▀▀██▄ ███   ▀███   ███    ███   ███    ███ 
███    ███ ███   ███ ███    ███   ███    ███   ███    █▀  
███    ███ ███   ███ ███    ███   ███    ███  ▄███▄▄▄     
███    ███ ███   ███ ███    ███ ▀███████████ ▀▀███▀▀▀     
███    ███ ███   ███ ███    ███   ███    ███   ███    █▄  
███    ███ ███   ███ ███   ▄███   ███    ███   ███    ███ 
████████▀   ▀█   █▀  ████████▀    ███    █▀    ██████████ 
                                                             
 <================================================================>

Lorem Ipsum

================================================================================================================================
--------------------------------------------------------------------------------------------------------------------------------
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

██╗  ██╗███████╗ █████╗ ██████╗ ███████╗██████╗      ██████╗ ███╗   ██╗██╗  ██╗   ██╗
██║  ██║██╔════╝██╔══██╗██╔══██╗██╔════╝██╔══██╗    ██╔═══██╗████╗  ██║██║  ╚██╗ ██╔╝
███████║█████╗  ███████║██║  ██║█████╗  ██████╔╝    ██║   ██║██╔██╗ ██║██║   ╚████╔╝ 
██╔══██║██╔══╝  ██╔══██║██║  ██║██╔══╝  ██╔══██╗    ██║   ██║██║╚██╗██║██║    ╚██╔╝  
██║  ██║███████╗██║  ██║██████╔╝███████╗██║  ██║    ╚██████╔╝██║ ╚████║███████╗██║   
╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═════╝ ╚══════╝╚═╝  ╚═╝     ╚═════╝ ╚═╝  ╚═══╝╚══════╝╚═╝   
*/

#include "brassica/common.hh"

#include <cstddef>
#include <memory>
#include <span>

namespace meadow::undae {

	using sample_t = double;

	// ================================
	// ABSTRACT
	// ================================

	using Buffer = std::vector<sample_t>;
	using BufferView = std::span<sample_t>;
	
	struct Generator {
		virtual void generate(BufferView) = 0;
	};
	
	struct Modulator {
		virtual void modulate(BufferView) = 0;
	};
	
	using GeneratorPtr = std::unique_ptr<Generator>;
	
	// ================================
	// BASIC UTILITY
	// ================================
	
	struct Volume : public Generator {
		Volume(sample_t volume, GeneratorPtr && ptr) :
			m_vol(volume),
			m_ptr(std::move(ptr))
		{}
		
		inline void generate(BufferView buf) override {
			m_ptr->generate(buf);
			for (size_t i = 0; i < buf.size(); i++)
				buf[i] *= m_vol;
		}
		
	private:
		sample_t m_vol;
		GeneratorPtr m_ptr;
	};
	
	// ================================
	// OSCILLATORS
	// ================================
	
	namespace osc {
	
		// ================================
		// OSCILLATORS -- GENERATORS
		// ================================
	
		struct Sine : public Generator {
			Sine(sample_t freq) : m_freq(freq) {}
			
			inline void generate(BufferView buf) override {
				for (size_t i = 0; i < buf.size(); i++) {
					buf[i] = std::sin(m_cur);
					m_cur += m_freq * brassica::pi<sample_t>;
				}
				m_cur = std::fmod(m_cur, brassica::pi_m<sample_t>(2));
			}
			
		private:
			sample_t m_freq;
			sample_t m_cur = 0;
		};
	
	}

}
